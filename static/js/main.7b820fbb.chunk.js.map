{"version":3,"sources":["images/achit lo khaw thalar lyrics.jpg","images/MyoGyiChangesAlbumPic.jpg","images/19_18.jpg","images/AlexNautKya.jpg","components/NavBar/NavBar.js","components/Image/Image.js","components/Album/AlbumCard.js","components/Album/BrowseAlbums.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","Navbar","fixed","bg","variant","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","Image","src","lyrics","alt","AlbumCard","artistFont","this","props","artistName","length","Col","md","Card","style","width","margin","Img","albumPic","Body","Title","albumName","Text","Button","size","React","Component","BrowseAlbums","Container","Row","album1918","albumAlex","Home","state","allLyrics","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,yD,mBCA3CD,EAAOC,QAAU,IAA0B,mD,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,kOCuB5BC,MAnBf,WACI,OACI,kBAACC,EAAA,EAAD,CAAQC,MAAM,MAAMC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,MAChD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SAAnB,kBACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,qBAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,KAAf,QACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,KAAf,WAEJ,kBAACK,EAAA,EAAD,KACI,kBAACA,EAAA,EAAIE,KAAL,CAAUP,KAAK,KAAf,eACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,KAAf,kB,yECJLQ,MARf,WACI,OACI,yBAAKF,UAAU,gBACX,yBAAKG,IAAKC,IAAQC,IAAI,a,gCCoBnBC,G,uLAnBP,IAAMC,EAAcC,KAAKC,MAAMC,WAAWC,OAAS,GAAM,cAAgB,iBACzE,OACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACJ,kBAACC,EAAA,EAAD,CAAMd,UAAU,+BAA+Be,MAAO,CAAEC,MAAO,QAASC,OAAQ,WAC5E,kBAACH,EAAA,EAAKI,IAAN,CAAU3B,QAAQ,MAAMS,UAAU,eAAeG,IAAKK,KAAKC,MAAMU,WACjE,kBAACL,EAAA,EAAKM,KAAN,CAAWpB,UAAU,eACjB,kBAACc,EAAA,EAAKO,MAAN,KAAcb,KAAKC,MAAMa,WACzB,kBAACR,EAAA,EAAKS,KAAN,CAAWvB,UAAWO,GACjBC,KAAKC,MAAMC,YAEhB,kBAACc,EAAA,EAAD,CAAQjC,QAAQ,eAAekC,KAAK,MAApC,qB,GAdAC,IAAMC,Y,mDCqBfC,E,iLAbP,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAK9B,UAAU,6BACX,kBAAC,EAAD,CAAWmB,SAAUA,IAAUG,UAAU,uBAAuBZ,WAAW,YAC3E,kBAAC,EAAD,CAAWS,SAAUY,IAAWT,UAAU,QAAQZ,WAAW,uCAC7D,kBAAC,EAAD,CAAWS,SAAUa,IAAWV,UAAU,wBAAwBZ,WAAW,e,GARtEgB,IAAMC,WCiBlBM,E,YAlBX,WAAYxB,GAAQ,IAAD,8BACf,4CAAMA,KACDyB,MAAQ,CACTC,UAAW,IAHA,E,sEAQf,OACI,kBAACN,EAAA,EAAD,CAAW7B,UAAU,QACjB,wBAAIA,UAAU,eAAd,iBACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAbG0B,IAAMC,WCSVS,MAXf,WACE,OACE,yBAAKpC,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACb,kBAAE,EAAF,SCEYqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7b820fbb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/achit lo khaw thalar lyrics.502b6976.jpg\";","module.exports = __webpack_public_path__ + \"static/media/MyoGyiChangesAlbumPic.a0689854.jpg\";","module.exports = __webpack_public_path__ + \"static/media/19_18.37fd47e2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/AlexNautKya.3663a45d.jpg\";","import React from 'react'\nimport { Navbar, Nav, Container } from 'react-bootstrap'\n// import Nav from 'react-bootstrap/Navbar'\n\nfunction NavBar() {\n    return (\n        <Navbar fixed=\"top\" bg=\"dark\" variant=\"dark\" expand=\"lg\" >\n            <Navbar.Brand href=\"#home\">Burmese-lyrics</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"#\">Home</Nav.Link>\n                    <Nav.Link href=\"#\">Search</Nav.Link>\n                </Nav>\n                <Nav>\n                    <Nav.Link href=\"#\">My SongList</Nav.Link>\n                    <Nav.Link href=\"#\">My Account</Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n\nexport default NavBar;","import './Image.css'\nimport React from 'react'\nimport lyrics from '../../images/achit lo khaw thalar lyrics.jpg'\n\nfunction Image() {\n    return (\n        <div className=\"lyrics-image\">\n            <img src={lyrics} alt=\"Lyrics\" />\n        </div>\n    );\n}\n\nexport default Image;\n","import React from 'react'\nimport {Card, Button, Col} from 'react-bootstrap'\nimport './Album.css'\n\nclass AlbumCard extends React.Component {\n\n\n    render() {\n        const artistFont = (this.props.artistName.length > 30) ? \"long-length\" : \"regular-length\";\n        return(\n            <Col md=\"4\">\n                <Card className=\"shadow rounded shadow-custom\" style={{ width: '18rem', margin: '0 auto' }}>\n                    <Card.Img variant=\"top\" className=\"albumImgSize\" src={this.props.albumPic} />\n                    <Card.Body className=\"text-center\">\n                        <Card.Title >{this.props.albumName}</Card.Title>\n                        <Card.Text className={artistFont} >\n                            {this.props.artistName}\n                        </Card.Text>\n                        <Button variant=\"outline-info\" size=\"sm\">View Album</Button>\n                    </Card.Body>\n                </Card>\n            </Col>\n            \n        );\n    }\n}\n\nexport default AlbumCard;\n\n","import React from 'react'\n\nimport { Container, Row, Col } from 'react-bootstrap'\nimport AlbumCard from './AlbumCard.js'\nimport albumPic from '../../images/MyoGyiChangesAlbumPic.jpg'\nimport album1918 from '../../images/19_18.jpg'\nimport albumAlex from '../../images/AlexNautKya.jpg'\n\n\nclass BrowseAlbums extends React.Component {\n\n    render() {\n        return(\n            <Container>\n                <Row className=\"justify-content-md-center\">\n                    <AlbumCard albumPic={albumPic} albumName=\"Pyaung Lal Chin Myar\" artistName=\"Myo Gyi\" />\n                    <AlbumCard albumPic={album1918} albumName=\"19:18\" artistName=\"Saung Oo Hlaing, Si Thu Lwin, Alex\" />\n                    <AlbumCard albumPic={albumAlex} albumName=\"Naut Kya Nay Tae Ngar\" artistName=\"Alex\" />\n                </Row>\n            </Container>\n\n        );\n    }\n}\n\nexport default BrowseAlbums;","import React from 'react'\nimport { Container } from 'react-bootstrap'\nimport Lyrics from '../Image/Image.js'\nimport BrowseAlbums from '../Album/BrowseAlbums.js'\n\n\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            allLyrics: [],\n        }\n    }\n\n    render() {\n        return(\n            <Container className=\"Home\">\n                <h2 className=\"text-center\">Browse Albums</h2>\n                <BrowseAlbums />\n                <Lyrics />\n            </Container>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar/NavBar.js'\nimport Home from './components/Home/Home.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <div className=\"content\">\n        < Home />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}